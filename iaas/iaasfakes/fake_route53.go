// Code generated by counterfeiter. DO NOT EDIT.
package iaasfakes

import (
	"sync"

	"github.com/EngineerBetter/concourse-up/iaas"
	"github.com/aws/aws-sdk-go/service/route53"
)

type FakeRoute53 struct {
	ListHostedZonesPagesStub        func(input *route53.ListHostedZonesInput, callback func(output *route53.ListHostedZonesOutput, lastPage bool) (shouldContinue bool)) error
	listHostedZonesPagesMutex       sync.RWMutex
	listHostedZonesPagesArgsForCall []struct {
		input    *route53.ListHostedZonesInput
		callback func(output *route53.ListHostedZonesOutput, lastPage bool) (shouldContinue bool)
	}
	listHostedZonesPagesReturns struct {
		result1 error
	}
	listHostedZonesPagesReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeRoute53) ListHostedZonesPages(input *route53.ListHostedZonesInput, callback func(output *route53.ListHostedZonesOutput, lastPage bool) (shouldContinue bool)) error {
	fake.listHostedZonesPagesMutex.Lock()
	ret, specificReturn := fake.listHostedZonesPagesReturnsOnCall[len(fake.listHostedZonesPagesArgsForCall)]
	fake.listHostedZonesPagesArgsForCall = append(fake.listHostedZonesPagesArgsForCall, struct {
		input    *route53.ListHostedZonesInput
		callback func(output *route53.ListHostedZonesOutput, lastPage bool) (shouldContinue bool)
	}{input, callback})
	fake.recordInvocation("ListHostedZonesPages", []interface{}{input, callback})
	fake.listHostedZonesPagesMutex.Unlock()
	if fake.ListHostedZonesPagesStub != nil {
		return fake.ListHostedZonesPagesStub(input, callback)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.listHostedZonesPagesReturns.result1
}

func (fake *FakeRoute53) ListHostedZonesPagesCallCount() int {
	fake.listHostedZonesPagesMutex.RLock()
	defer fake.listHostedZonesPagesMutex.RUnlock()
	return len(fake.listHostedZonesPagesArgsForCall)
}

func (fake *FakeRoute53) ListHostedZonesPagesArgsForCall(i int) (*route53.ListHostedZonesInput, func(output *route53.ListHostedZonesOutput, lastPage bool) (shouldContinue bool)) {
	fake.listHostedZonesPagesMutex.RLock()
	defer fake.listHostedZonesPagesMutex.RUnlock()
	return fake.listHostedZonesPagesArgsForCall[i].input, fake.listHostedZonesPagesArgsForCall[i].callback
}

func (fake *FakeRoute53) ListHostedZonesPagesReturns(result1 error) {
	fake.ListHostedZonesPagesStub = nil
	fake.listHostedZonesPagesReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeRoute53) ListHostedZonesPagesReturnsOnCall(i int, result1 error) {
	fake.ListHostedZonesPagesStub = nil
	if fake.listHostedZonesPagesReturnsOnCall == nil {
		fake.listHostedZonesPagesReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.listHostedZonesPagesReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeRoute53) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.listHostedZonesPagesMutex.RLock()
	defer fake.listHostedZonesPagesMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeRoute53) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ iaas.Route53 = new(FakeRoute53)
