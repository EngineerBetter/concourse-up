// Code generated by go-bindata. DO NOT EDIT.
// sources:
// ../../../../concourse-up-ops/README.md (54B)
// ../../../../concourse-up-ops/director/aws/cpi.yml (2.154kB)
// ../../../../concourse-up-ops/director/custom-ops.yml (2.151kB)
// ../../../../concourse-up-ops/director/external-ip.yml (887B)
// ../../../../concourse-up-ops/director/manifest.yml (5.512kB)
// ../../../../concourse-up-ops/director-versions.json (1.855kB)
// ../../../../concourse-up-ops/manifest.yml (8.674kB)
// ../../../../concourse-up-ops/ops/shas.json (929B)
// ../../../../concourse-up-ops/ops/versions.json (2.561kB)

package file

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _readmeMd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x52\x56\x48\xce\xcf\x4b\xce\x2f\x2d\x2a\x4e\xd5\x2d\x2d\xd0\xcd\x2f\x28\xe6\xe2\x0a\x2e\x2d\x28\xc8\x2f\x2a\xc9\xcc\x4b\x57\x48\xcb\xcc\x49\x2d\x56\x48\xcb\x2f\x52\x70\x46\x52\xc6\x05\x08\x00\x00\xff\xff\xa9\x11\x12\x1e\x36\x00\x00\x00")

func readmeMdBytes() ([]byte, error) {
	return bindataRead(
		_readmeMd,
		"README.md",
	)
}

func readmeMd() (*asset, error) {
	bytes, err := readmeMdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "README.md", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xad, 0x8d, 0xae, 0xfa, 0x54, 0xec, 0xf1, 0x74, 0x52, 0xf0, 0x48, 0x9b, 0x41, 0x71, 0xf7, 0xb6, 0x12, 0xd1, 0x90, 0xa6, 0xf9, 0xd4, 0x53, 0xa4, 0x1c, 0x19, 0x50, 0x6e, 0xe7, 0x3, 0x9, 0x40}}
	return a, nil
}

var _directorAwsCpiYml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x55\x4f\x6b\xfb\x38\x10\xbd\xfb\x53\x0c\x14\x7e\x24\x85\xc4\x69\xd8\x25\x60\x58\x96\x52\xf6\xb0\xb7\x85\x3d\xec\x51\x8c\xed\x69\xa2\x56\xb1\xc4\x8c\xec\x6c\xfa\xe9\x17\xd9\x52\xfe\xb8\x75\xba\xa5\xbf\x9b\x35\x63\xbd\xf7\x46\xf3\x34\x5a\x80\x3f\x3a\x2a\x80\xc9\x19\xac\x28\x03\x70\xe8\x77\x05\xe4\x4c\x86\x50\x48\xf2\x45\x06\xd0\xa1\x69\xa9\xc8\x00\x00\x1a\xdc\x53\x01\xa5\x95\xdd\x02\x0f\xb2\xa8\x9c\xee\xc3\x1d\xb1\x68\xdb\x14\x30\x9b\x55\x4e\xab\xb8\x9c\xcf\xfb\x64\xcb\x26\x25\x5a\x36\x31\x28\x3b\x7c\x48\xd1\xf0\x3d\x9f\x67\xd9\x0d\x35\x62\x5b\xae\x48\x39\x6b\x8d\xe4\x41\xc4\x6f\xdd\x5e\x72\xf1\xb4\xaf\xc8\x98\xdf\xaf\x45\x46\xc2\x94\xfd\x80\xf5\x94\x4a\xd4\x77\xf0\x64\x9b\x67\xbd\x6d\x99\xe0\xf1\x9f\xbf\x41\xf4\x1b\xc9\xd7\x05\x55\xc6\xb6\xb5\x72\x6c\x1d\xb1\xd7\x24\x23\x61\xba\x11\x8f\x4d\x45\x6a\x80\xdd\xff\xb2\xfc\xd7\x20\x6f\xa9\x4f\x92\xdb\xd1\x9e\x18\x8d\xaa\xb5\xbc\x0e\x1b\x20\x0a\xd8\xba\x75\x5c\x07\x61\x05\xac\x7f\x55\xab\xd5\xaa\x0f\x61\x87\xda\x60\xa9\x8d\xf6\x47\xf5\x66\x1b\x0a\xf5\xe1\xdb\xcd\xf3\x0c\x04\x97\xd2\xc3\xfa\x53\xf1\x67\x25\xd3\xc0\x0d\xf9\x83\xe5\xd7\x04\x4b\xcf\xd8\x1a\x9f\x4b\x5b\x36\xe4\x25\x5f\x7d\x46\x31\xfc\xd8\x37\xa8\xff\x52\xba\x1e\x9a\xf3\x47\x83\xa5\x21\x60\xda\x6a\xf1\x7c\x84\x17\x5b\x4e\x8b\x38\x9d\xf2\x96\x6d\xeb\xa2\x96\x60\xd9\xfc\xc5\x96\x13\x8e\x4e\xc8\x7d\x28\x9a\x7f\xf0\xf9\x8d\x6a\xa7\x89\xce\x15\xe6\x09\x79\x54\x2a\xd6\x35\x93\x48\xa8\x55\x37\x9e\xb8\x41\xa3\xb4\x8b\x36\xdd\x59\xf1\x1f\x67\xea\xb2\x80\x3b\xf0\xb6\xb6\xc0\xb4\xb7\x1d\x45\x5b\x0c\x3b\x1e\xd6\x9b\xe5\x6a\xb9\x5a\x3e\xc4\x68\x2b\xc4\x05\x38\x2b\x7e\xcb\x24\x31\xe8\x50\xe4\x60\xb9\x0e\x04\x29\xa5\x52\x30\xd2\x00\xd4\xe8\xb1\x3c\x1f\xc2\x10\xc4\x1a\x9d\x7f\x07\xb9\xf3\xde\x15\x57\x8c\x57\xa7\x79\xcd\x98\x52\xef\x19\x9d\x65\x1f\x9c\xbd\xd9\x6c\xb2\x04\xf5\x41\x73\xfe\x0f\xd8\x25\x54\x76\x07\x8f\x75\x0d\x4f\x7f\xfd\xf9\x93\x5c\x03\x3f\xc2\xcc\x0a\x58\x67\xfb\xe0\x41\x54\x9a\x85\x57\xee\x39\x4d\xc9\x6f\xba\xa8\xd6\x4c\x95\xb7\x9c\x47\xee\xb3\x9b\x4e\xdc\xd3\x0c\xa7\x5b\xd7\xe9\x9a\x38\xf7\xb4\x77\x06\x3d\x5d\x60\xdc\xa7\x92\xbe\x29\x13\x0f\x17\x57\x1a\x7e\xe0\x61\x70\x08\x56\x15\x89\xa8\x57\x3a\x2a\xdd\x37\xee\x2a\x90\x66\x33\x55\x4c\x5e\x9d\x53\xfd\x1c\x18\x07\xd3\x3d\x18\x46\x4b\x8f\x30\xb4\x60\x36\x1b\xc7\x46\xbf\x0a\x55\x2d\x87\x21\x39\x14\x70\xb9\x63\x94\x8a\x1b\x83\xbb\x86\x37\x6d\xf8\xba\x39\x52\x47\x67\x2c\xb2\x53\xbe\x6d\x1a\x1a\xbf\x4d\xd3\x57\x3b\x9a\x76\x9d\x9d\xef\x51\x57\xa1\x1b\x72\xac\x3b\xf4\x94\x4e\xe5\x62\xf9\x15\x51\x93\x8d\xba\x0f\x8d\x9a\x86\xe9\x90\x75\x98\xbf\x9f\xcc\xce\xd3\x2d\xbc\x78\x2e\x4e\xa1\xff\x02\x00\x00\xff\xff\x52\xb9\x6e\xa4\x6a\x08\x00\x00")

func directorAwsCpiYmlBytes() ([]byte, error) {
	return bindataRead(
		_directorAwsCpiYml,
		"director/aws/cpi.yml",
	)
}

func directorAwsCpiYml() (*asset, error) {
	bytes, err := directorAwsCpiYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "director/aws/cpi.yml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x8a, 0x3b, 0x10, 0x20, 0x69, 0x6e, 0x23, 0xbe, 0x5b, 0x54, 0x1a, 0x6c, 0x6f, 0x66, 0x2c, 0x4b, 0xe5, 0x47, 0x0, 0xfc, 0x17, 0xec, 0x41, 0x6e, 0x5f, 0x11, 0xd2, 0xb2, 0x3e, 0xa2, 0xe, 0x43}}
	return a, nil
}

var _directorCustomOpsYml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xdc\x55\xc1\x6e\xdb\x30\x0c\xbd\xe7\x2b\x74\xac\x0f\xad\xb3\x66\x97\x05\x18\xf6\x29\x02\x25\x11\x89\x16\xdb\x14\x48\xda\x59\xf6\xf5\x83\x14\xdb\x71\x3b\xa4\xd8\xea\x9e\x7a\x93\x9e\xa8\xf7\xf8\x44\x9a\x7e\x34\x7a\x49\xb8\x37\x8c\xa9\x01\x8f\x1b\x63\x12\xe8\x71\x6f\xea\x10\xe5\x64\x13\x51\x23\x75\x07\x2d\x7e\xcf\x7b\xb9\xa2\x12\x7f\xe7\xc0\x01\x9a\x1e\xf7\xe6\x79\xbb\xdd\x6e\x37\x9b\xbb\x44\xb1\x13\x85\xce\xa3\x3d\x30\xf5\x69\x64\x73\x24\xc7\x3a\x31\x25\x64\x8d\x28\xb5\x6b\xc8\x89\x12\xdf\x78\x37\xc6\x18\x03\xde\xa3\x88\x3d\xe1\xc5\xc6\xb0\x37\x0f\x0f\xb2\xb3\x70\x16\xfb\x02\xaf\xaa\x12\xeb\x7a\x7f\x42\xb5\x99\x3e\x47\xce\x8c\xf6\x7a\x30\x46\x25\xa6\x21\x06\xe4\xbd\x91\x5d\x01\x64\x67\x19\x0f\x91\xba\x7c\xe9\xba\x1a\x43\x05\x3d\xa3\x2e\xb4\x16\x09\xfc\x75\x56\x55\x6b\x9f\x20\x44\x46\xaf\xc4\x75\x70\xaf\x1e\x21\x40\xd2\x9c\x71\x22\xd1\x03\xa3\x14\x34\x80\x82\x03\x29\x5e\x83\x2b\xb6\xc7\xbc\x8f\x24\x3a\xa2\x79\x39\x19\x07\x91\x33\x71\x18\x4f\xa6\xed\x74\x4a\x3c\xdd\xc9\xcb\x11\xed\x25\xcb\x16\x34\x2f\x47\x8d\x8f\xf2\xd9\xc2\x2f\xab\x47\x46\x08\xf2\xe3\xd6\x4e\x5f\x56\xf7\xd2\x2c\xa0\xdc\x8b\x62\xb0\x1e\x59\x97\x12\xc5\x90\x87\x82\xaf\xf7\xb3\xa8\xca\xe7\x2d\x5a\xfe\x30\x44\xf9\xf2\xd9\x9b\x73\xf6\x79\x54\x4d\x75\xe6\xbd\xb5\x0d\x84\x36\x76\x1f\x26\x30\xe5\xfc\xef\xfc\x8c\x42\x3d\x7b\x5c\x4e\xe5\xa1\x95\xda\x37\xd4\x07\xbb\xd0\x98\x13\xc9\x44\x37\x7e\x7d\x7e\x92\x16\x9a\x66\x29\xd1\xd2\xf0\xbf\x0e\xe0\x80\x9d\xd6\xd8\x0d\xf7\x79\x06\xe0\x08\xae\xc1\x89\x61\x1e\xc5\x1e\xde\x71\x49\x90\x07\x64\xab\x8d\xbc\x27\xf3\x9f\xe4\xc6\xed\xd4\xa1\x8f\xdf\x9e\xbe\xae\x63\xba\xfd\xad\xee\xd2\xcc\x45\x29\x7f\x9b\x3a\x8f\x9a\xfb\xc1\xf7\x2a\x8b\xdd\x50\x17\xe9\xd6\xf5\x6f\x98\x7f\xf5\x72\x39\xd8\x3a\x22\x15\x65\x48\x56\x64\x6d\xc5\xe7\x81\x7a\x26\x3e\x21\xcb\x1b\x3d\xaa\x70\x78\x39\x69\x33\x50\x55\x9b\x3f\x01\x00\x00\xff\xff\xfd\x07\xfb\x75\x67\x08\x00\x00")

func directorCustomOpsYmlBytes() ([]byte, error) {
	return bindataRead(
		_directorCustomOpsYml,
		"director/custom-ops.yml",
	)
}

func directorCustomOpsYml() (*asset, error) {
	bytes, err := directorCustomOpsYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "director/custom-ops.yml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xf6, 0x77, 0xef, 0x1e, 0xfb, 0x87, 0x82, 0x94, 0x53, 0x51, 0x1b, 0x41, 0xee, 0x6e, 0x1c, 0x8e, 0xb7, 0xf9, 0x23, 0x90, 0xee, 0xd, 0x3d, 0xc7, 0x12, 0x7, 0xc3, 0xb2, 0xa8, 0x5a, 0xd, 0xa1}}
	return a, nil
}

var _directorExternalIpYml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x92\xd1\xca\xdb\x30\x0c\x85\xef\xf3\x14\x82\xdd\x24\xb0\xe2\x5d\xfd\x14\xc3\xe8\xde\xa3\x0c\xa3\xd8\x6a\x63\xe6\x5a\xc6\x92\xd3\xf5\xed\x47\xba\x76\x1d\x81\xae\xd0\x5d\x05\x44\x7c\xbe\xf3\xc9\xde\x80\x5e\x0a\x59\xa8\x54\x12\x7a\xea\x00\x0a\xea\x64\xc1\x64\xd2\x33\xd7\x1f\x62\x36\x1d\xc0\x8c\xa9\x91\xed\x00\x00\x32\x9e\xc8\x42\x69\x63\x8a\xfe\x3a\xf8\x7d\x7e\x8e\xa5\xeb\x9e\x86\xc5\x2c\x8a\xd9\x93\x3b\x56\x6e\x45\xcc\x12\xf2\x75\x64\x99\x1e\x98\x2f\x26\xd0\x01\x5b\xd2\xdd\x1f\x1e\xec\x43\x96\xcf\x70\x44\xa5\x33\x5e\xbe\xff\x5f\xfe\x2b\x0d\x51\xd4\xe8\x5d\x2c\x62\x61\xdf\xf7\xf4\x53\xa9\x66\x4c\x2e\x96\x61\x78\x0f\x5d\x2a\x17\xaa\x1a\x49\x4c\x88\x95\xbc\x72\xbd\x3b\x3a\x91\xc9\x71\xd1\xc8\x59\x76\xe6\x26\xe8\x26\x16\x7d\xc8\xaf\x3a\x74\xdd\x27\x50\x0e\x0c\x32\x71\x4b\x01\x32\x2b\xa0\xf7\x24\x02\x99\xf3\x26\xd0\x21\x66\x0a\x30\x63\x95\xe7\x65\x7d\xe2\x16\x5c\xa9\x3c\xc7\x40\xd5\x9c\xc6\x26\x0f\xe0\xa4\x5a\xc4\x9a\xeb\xd4\xf6\xfd\xf2\x71\x23\xb3\x8a\x56\x2c\xae\xa0\xc8\x99\x6b\x18\x86\x6f\xab\x66\xf6\x63\xfb\xb1\xfd\xc7\x86\x56\xd0\x45\x5d\x5b\xce\x94\xcc\x0b\xe1\xa7\x89\x33\xd6\x88\x63\xa2\xdb\xb6\x57\x4d\x45\x92\xb9\xed\xd6\x60\xba\x26\x6a\x9c\xc9\x2d\xff\xfe\xfd\x0e\xde\x07\xde\xaf\xf3\x7d\xd4\xaf\x00\x00\x00\xff\xff\x46\x6c\xcb\x65\x77\x03\x00\x00")

func directorExternalIpYmlBytes() ([]byte, error) {
	return bindataRead(
		_directorExternalIpYml,
		"director/external-ip.yml",
	)
}

func directorExternalIpYml() (*asset, error) {
	bytes, err := directorExternalIpYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "director/external-ip.yml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x32, 0xb0, 0x31, 0x11, 0x46, 0x59, 0x28, 0xe6, 0x8d, 0xd2, 0xb7, 0xea, 0x5c, 0xfc, 0x70, 0xcd, 0xd0, 0x7a, 0x94, 0x5, 0xa2, 0x69, 0xcd, 0xa9, 0xb8, 0x44, 0x2, 0x7f, 0xd1, 0xfc, 0x46, 0xd2}}
	return a, nil
}

var _directorManifestYml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x58\x5f\x6f\xdb\x36\x10\x7f\xd7\xa7\x20\x3a\xa0\xb5\x8b\xda\x4e\xdc\x24\xeb\xf4\xb4\xef\x51\x14\x04\x4d\x5e\x2d\xae\x12\x49\xf0\x28\x65\x59\x91\xef\x3e\x90\x96\x28\x4a\xa2\x1d\x67\xcd\xc3\xda\x07\x57\x77\xc7\xe3\xef\xfe\x1f\xab\x58\x03\x25\x39\x68\xac\x8a\xc2\x42\x0d\x0c\x01\xcb\x62\x43\x12\x3a\x21\x1d\x58\x94\x5a\x95\x64\xb5\xf2\x14\xda\x7f\xaf\xd7\x05\x21\xad\xad\x23\xbd\xb5\x75\xa0\x61\xc5\x6e\x23\xd1\x7f\xac\xd7\xa3\x4a\xd3\xcc\x34\x9a\x26\xab\xd0\x34\x4b\x7d\xa6\x19\xd4\x15\x16\x50\xb7\x96\x03\x35\x5a\xd7\x09\xe4\xae\xc1\x82\x10\x05\xee\x51\xdb\x1f\x25\x11\xf0\x9d\xb5\xb5\x2b\x08\x01\xd5\x95\x05\x21\x24\x18\x75\xfa\x17\x21\x86\x21\x3e\x6a\x2b\x4a\xf2\xe1\xe3\x87\x9e\xd6\x1c\x5a\x1c\xf8\x84\x70\xb0\xce\xdf\xed\xa9\xf4\xa0\xb5\x43\x67\x99\xa1\x88\x1e\x5a\x21\x24\xfe\x98\x23\xf0\x34\x8f\x21\xf0\x50\xfe\x03\x25\x79\xb8\xa7\xf7\x9f\x1f\x8a\xa2\x87\x95\x0a\x47\x7c\xee\xc9\x40\x49\x1a\xa6\x5a\x56\x7b\x9b\xdb\x83\x02\x17\x80\x6c\x88\x65\xea\x08\x1e\x85\x54\x0e\xac\x62\x35\xe5\x52\xd8\xe0\x1b\x42\x8e\xcc\xc1\x23\x7b\x9a\xb0\x8f\x8f\x3d\x13\x1d\x73\x92\x97\xe4\x6b\xc2\x94\x66\xbd\xfe\x16\xb8\x42\x61\x49\xbe\x7e\xd9\x86\xbf\xdf\x8a\x42\x2a\x74\x4c\x71\xa0\x47\xab\x5b\xb3\x4c\x84\x81\x8f\x25\xb9\x2d\x08\xf9\x4b\x1f\x7a\x80\x3f\x63\x70\x3f\x91\x3e\x8d\xc2\xd7\x73\xca\x55\xcc\x61\xca\xd6\x58\x4d\xf8\x46\xa3\x3b\x5a\xc0\xcd\x1f\xdb\xbb\x4b\x72\x87\x5a\x1f\xd0\x69\x0b\x97\x84\x84\xb4\xc0\x9d\xb6\x97\x64\x2a\x60\xb5\xab\x68\xa3\x95\xcc\x4b\x4e\x92\x6c\xc8\x2d\xe3\x93\x15\x1d\x28\x47\x63\xf8\xc7\xa8\x8f\x21\xf6\x17\xcd\x83\x3c\x04\x84\x4a\x83\xf9\xa0\x18\xab\x0d\x58\x27\xa1\xcf\x41\x76\x04\xe5\xca\x34\x35\x83\x1f\xcb\xdd\x2e\xfc\xac\x56\xfe\x87\x0e\x79\xbc\x5e\xff\x39\xd3\x59\xde\xed\xf7\xfb\xfe\x78\x2c\x81\x79\x19\x84\xef\xc1\xab\x98\x52\x37\x1e\x50\x27\x05\xd8\x92\x08\xd6\x25\x1c\x42\xb4\x71\x52\xab\x89\xb8\xff\xf3\x1b\x71\x5a\x68\x82\x8f\xd2\xf1\x8a\x38\x4d\x5a\x94\xea\x48\x2a\xe7\x0c\xce\x44\x41\x09\xa3\xa5\x72\x65\xe0\x96\xbb\xdd\x1c\xfc\xfe\x7e\x7f\x7f\x33\x3b\xd4\xa2\x07\x13\xfc\x32\xe3\x8c\xd5\xbc\x5a\x45\x73\x68\x90\x4c\x3c\x34\x3b\xe4\xea\x85\x05\x7d\xd5\x2f\xa8\x84\x70\x36\xd5\xcd\xd9\xd6\x8b\xca\xef\x92\x33\x07\xbd\xee\x10\x98\xfe\x30\x13\xc2\x02\xe2\xa4\x38\xbd\x65\x45\x6a\x8b\x3f\xb0\x68\x48\x8b\xc8\x16\x19\xbc\x27\x3c\x41\x10\xc1\x76\x60\xa9\xab\x71\xcb\x59\x62\x25\xaf\xa5\xb7\x9f\xb3\xd4\x9e\x04\x74\x54\x90\xb5\xa5\x47\x65\x65\xc7\x1c\xd0\x1f\xf0\x94\x8a\x27\xe4\x44\xfc\x04\xe4\xa5\xdb\x52\xb8\xaf\xb8\x35\x39\x96\xbf\x7d\xa8\xfb\x17\xad\x0d\x6e\x41\x3a\xc8\xbf\x1a\x49\x56\x41\x1e\xd3\xb4\xcf\x5c\x8b\x6c\x7a\xea\x3f\xe3\xcb\xa8\x59\xa2\x1c\x5a\x6f\x49\xde\x8b\x43\xaf\xb8\x0e\x4d\x8e\xc6\x0c\xbe\xdd\xff\xbe\xbd\xd9\xde\x6c\x6f\x7b\x7e\xa5\xd1\x2d\xa9\xa7\x8c\x1e\xf4\x65\xb2\x7a\x60\x2d\x33\x5b\x30\xc7\x0e\xb1\xff\xc6\x02\x62\xc6\x2d\x54\xc6\x0a\xbc\xb2\xce\x8c\xf6\x53\x3c\xed\x26\xb9\xb6\xb6\xcc\x9d\x93\x35\x03\x3d\x92\xf3\x8d\x26\x66\xc2\xc2\xb2\x49\x13\xcf\x77\xb0\x57\xf5\xae\x69\x0f\x98\xf5\xaa\xab\x7a\x54\x36\xfd\xc6\x33\xaf\xaf\xce\xec\xd9\x65\xa2\xcd\x5d\x7c\x36\xbb\x4e\x93\x73\xb5\x8a\x4e\xf5\x84\x31\x55\x0e\x25\xf9\x18\x33\xf5\x7b\xdd\x62\x45\x99\x35\x25\x71\xb6\x85\x38\xed\xd8\xa1\xf6\xa3\x1b\x1d\x15\x60\x6a\xfd\x34\x61\x1f\x41\x81\xf5\xe0\xba\x26\x3a\x18\x73\x0a\x04\x88\x60\xbd\xa0\x7e\x76\xb7\x48\xfd\x7c\xf7\x01\x5c\x8a\x86\xc2\x13\x50\xcb\x0e\x2c\x08\xea\xa0\x31\x35\x73\x30\x55\x7b\x3a\x8e\x25\xb9\x1b\x0a\x4d\x73\x56\x53\x91\x4e\xd2\x93\x3e\x31\xbd\xa3\xf3\xf5\x3c\xca\x58\xe0\xda\x0a\xda\x93\x53\x49\xc4\x7a\x14\xeb\xe3\x13\xfd\x88\x58\x9f\x69\x53\xc3\xaa\x3b\x11\xcd\x85\xdf\xe7\x2f\x6d\x98\x62\x47\x68\x26\x89\x3d\x16\x55\xb0\x29\xd2\xc3\x57\x9a\xa3\x5e\xc3\x6c\xcf\x38\x05\x9c\x89\x46\xaa\xc9\xe0\x4d\x0b\x23\x70\xf3\xa3\x7c\x50\x50\x35\x67\x4f\x57\xcd\xfc\x68\xd5\x94\xb3\xd2\xa7\x8c\x73\xdd\x2e\x8b\x35\x51\x7b\x59\x65\x70\x24\xa3\x79\x5f\x8e\x73\xd9\x02\xb6\xb6\x67\x2d\x83\xad\x9c\x29\xc9\x7b\xe5\x4c\x71\x32\xcd\xc9\x06\x6e\xb7\x47\xad\x8f\x35\x6c\xb9\x6e\x12\xf2\x3e\x4f\xfe\x9c\x27\xdf\xa5\xe4\x82\xd7\xba\x15\x34\x06\xad\x18\x16\xcc\xb0\xaa\x95\xbb\x5d\xf8\x5a\x3c\x7d\x2e\xec\x9a\x0f\x5f\x1e\xbe\x14\x2f\xbc\x99\xce\xad\xb8\xe4\xe7\xe9\xf2\x77\x57\xdf\x7e\x13\x1a\xc6\x4d\xb8\xf5\xdd\xf3\x6c\x2e\x90\x9f\xb3\x64\xfc\x44\x0c\x73\x55\x49\x76\x1d\xb3\xbb\x8e\x33\xb3\x6b\x24\xb7\x9a\xfa\x59\xb3\xf3\xa3\x67\xc7\x19\xaf\xe0\x79\x0c\xc0\x47\x1f\x80\xa2\x63\x56\xfa\xf8\x24\xaf\xa1\x69\x1a\xc6\xb7\x5b\x24\xc4\x57\xd3\xf9\xd1\x70\xcd\xa1\x69\xf3\x3f\x7f\x22\x49\xc2\xf3\x42\x67\xdc\x78\xfe\xc0\x64\xfb\x3c\x2f\xb6\x18\xe7\x4b\xd1\xf9\x63\x97\x72\x16\x85\x92\xf6\x52\xcc\x5e\x14\xd2\xef\x98\x49\x51\x70\xdd\x34\x5a\xd1\x93\x2a\xce\x8a\x73\xa6\x21\xd6\xd7\xa8\xf7\xba\x27\x80\x66\x37\xe4\x16\x09\x56\x07\x8a\x93\x1d\x04\xa9\xec\x1b\x2e\xf9\x8f\x80\xb1\xf6\xff\x1f\x88\xfa\xc5\xfd\x97\xbd\xdf\xa3\xdc\x7a\x7d\x1b\xce\xb6\xbe\x86\x36\xc3\xa5\xb3\xeb\xc6\x75\xe0\x5a\x1f\x8c\x28\x2f\x5c\x3b\xbb\xf3\x6a\x5f\x84\x49\xfa\xb7\x03\x25\x40\xf8\xf9\x47\x5b\x64\xc7\x7e\x8d\xdc\xf4\x6f\x17\xca\x5a\x57\xcd\xbd\x96\x59\xf7\xdf\xcc\xa0\x41\x69\xc6\xa8\xf3\x58\xfb\x87\xdd\x05\xac\xcb\xd5\xff\xcd\x10\x57\xcd\xaf\x63\x4d\x57\xd4\x37\x4b\xc9\xa8\xf4\x42\x5e\xe6\x76\xd5\x6b\x3d\x33\x03\xfd\x56\x25\xfa\x6f\x00\x00\x00\xff\xff\x8f\xe1\x2b\x39\x88\x15\x00\x00")

func directorManifestYmlBytes() ([]byte, error) {
	return bindataRead(
		_directorManifestYml,
		"director/manifest.yml",
	)
}

func directorManifestYml() (*asset, error) {
	bytes, err := directorManifestYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "director/manifest.yml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x35, 0x82, 0x1, 0x24, 0x34, 0x1d, 0x23, 0xe4, 0x7c, 0xdb, 0xcb, 0xdc, 0x2, 0x6a, 0xe8, 0x6a, 0xe4, 0x59, 0xc3, 0xbd, 0x43, 0x37, 0x31, 0xba, 0x47, 0x16, 0x1, 0x4f, 0x53, 0x8e, 0xc5, 0x29}}
	return a, nil
}

var _directorVersionsJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x93\xdd\x6a\xe3\x38\x1c\xc5\xef\xf3\x14\x26\xd7\x95\xad\x2f\x5b\x52\xa1\x14\x96\x65\x61\x77\xa1\x13\x68\xe9\x74\x7a\x13\x64\x59\x8e\x35\x23\x5b\x1e\xcb\x8e\xd3\x0c\x7d\xf7\x21\x4e\x52\xa7\x99\xb6\x53\x9a\xb9\x13\xfa\x38\xff\xc3\x39\x3f\xfd\x98\x04\xc1\x34\x75\xbe\x98\x9e\x07\x9b\x75\x10\x4c\xbb\xc6\x4e\xcf\x83\x69\xd1\xb6\xb5\x3f\x8f\x22\x4f\x42\x59\xca\xb5\xab\x64\xef\x43\xe5\xca\x68\x73\x1b\x28\x57\xd6\xc6\xea\x0c\x34\xda\x6a\xe9\x35\x68\x65\x93\x4a\x6b\xfd\xf6\x18\x27\x2c\x8c\x43\x08\xba\xb4\xab\xda\x0e\xac\x74\x65\xa4\x05\x82\x85\x08\x03\x0c\x11\x87\x1c\x43\x80\x09\x25\x71\x0c\x20\xe5\x8c\xd3\x98\xf3\xa7\x93\xe1\x80\x87\xed\x62\x7d\xb9\xd4\x8d\x37\xae\xfa\x37\xbb\xb8\x43\x09\xef\x9b\xaf\x89\x59\x5f\xfd\x77\x63\xe0\x2d\x4c\xaf\x67\x57\xb5\xfe\xdf\xce\xbf\xdd\x6b\x59\x7c\x9e\x9e\x6d\xed\xfb\x42\xa2\x8d\x7f\xc2\xa8\x10\x04\x61\x8d\x10\x4f\x30\x61\x94\x50\xad\x99\xc4\x54\x60\x8e\x70\x0a\x39\x55\x54\x13\x1a\xef\xdf\xed\x26\x6d\x9e\xee\xdc\x4f\x27\x41\xf0\x78\xb6\x0f\x08\x28\x6b\xc6\x90\x7a\x53\x65\xae\xf7\xef\x08\xca\x1a\x20\x9b\xd6\xe4\x52\xb5\x7e\xdc\x8a\x43\x18\x22\xb0\x53\x01\xb2\xcc\x12\x1a\xea\x95\xde\x9b\x29\xa5\x3a\x51\x3a\x93\x4d\x6f\xaa\xad\xf2\x5e\xd5\x9a\xaa\x5b\x9d\xa8\x3b\x68\xec\x64\xc7\x7c\xea\xf2\xcf\xf1\x53\x97\x00\x86\x08\xfd\x9e\x9e\x18\x12\x02\x28\xa3\x50\x50\x1c\x27\x07\xf4\xc4\x90\x88\x23\x7a\x8a\xb5\x87\x77\xd7\xb7\xab\xfb\xf5\xec\x1f\x7f\x33\xfb\xfb\x0b\x51\xa4\x6d\xfa\x59\x0e\x3f\xb5\xdd\xe2\xfb\x5f\xc7\xf4\x24\x10\xf2\x94\x72\x24\xb0\x54\x84\x2b\x9d\x48\x95\xe4\x39\x26\x5a\xc6\x10\x0b\xa9\x70\x1a\xa7\x0a\xa7\xe2\x05\x7a\xb6\xe6\xc7\x70\x54\x6d\x5e\x0d\x67\x93\x45\x68\x5c\x94\x45\x0b\xd3\x16\x5d\x3a\x04\xa4\xac\xeb\xb2\xdc\x75\x55\xd6\x3c\x00\x53\xa9\x2e\x95\xad\x6b\xb6\xb9\xc9\xde\x03\x55\x9b\x7d\x6c\x97\xcb\x0b\x86\x8f\xbd\xa7\x4c\x08\xa1\x45\x8c\x50\x9c\xa6\x89\x40\x32\x21\x50\x41\x96\x43\x4a\x84\xce\xe3\x34\x66\x8c\x73\xaa\xf0\x0b\xde\x19\x1e\x7d\xe7\xf6\xe1\x4d\xde\x0f\x1d\xbb\x4a\xb9\xae\xf1\xfa\x60\xb5\x73\xe8\xa3\xcc\xf5\x95\x75\x32\x8b\x96\x34\x44\x21\x8c\x72\xfb\x30\xdf\xc9\xcd\x9f\xe1\x79\x04\xfd\x29\xfa\x5b\xfa\xe7\x6f\xd3\x7f\xca\x80\x41\x6c\x7e\xf4\x0d\x7c\xab\x4b\xa5\xad\x7d\x47\xdd\xfb\xab\x7e\xac\x75\xa5\x2b\x50\x2c\xcb\x23\xea\x17\x6e\x2e\x17\xba\x6a\x2f\x97\x17\xc3\x07\x38\x2e\x9b\x22\x88\x68\xae\x28\x11\x8c\x41\x99\xe4\x14\x92\x2c\x97\x79\x22\x12\x22\x21\xa1\x10\x66\x94\x21\x2a\xb2\x17\xca\x1e\x8d\xb7\xba\x69\x64\xee\x9a\xf2\xcd\xc2\xf7\x81\x84\x85\xf4\x85\x51\xae\xa9\x87\xec\x9e\x1e\x47\x03\xf9\x6c\xdc\x98\x6f\x37\x9e\xb7\x1d\xae\x4d\xfd\x4a\xe3\x1f\x1e\x70\x58\xf7\xa1\xfe\x2f\x95\x7f\x78\xc2\x41\xdf\xc3\x80\x4d\x74\x93\xc7\xc9\xcf\x00\x00\x00\xff\xff\x44\x4d\xe7\x7d\x3f\x07\x00\x00")

func directorVersionsJsonBytes() ([]byte, error) {
	return bindataRead(
		_directorVersionsJson,
		"director-versions.json",
	)
}

func directorVersionsJson() (*asset, error) {
	bytes, err := directorVersionsJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "director-versions.json", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x85, 0xfd, 0xc9, 0x81, 0x22, 0x2e, 0x45, 0x68, 0x2f, 0x8, 0x6d, 0xd1, 0x90, 0xb9, 0x5f, 0x26, 0x72, 0x76, 0x48, 0x1a, 0x39, 0x69, 0xf2, 0xab, 0x86, 0xbd, 0x2, 0x6a, 0x37, 0x38, 0x92, 0x81}}
	return a, nil
}

var _manifestYml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x59\x4b\x6f\xe3\x38\xf2\xbf\xfb\x53\x10\xb9\x74\xf2\x47\x64\x3b\xdd\x79\xfd\x05\xcc\x61\xd1\x7b\x5b\x0c\xd0\xc0\x5e\x06\x08\x02\xa1\x4c\x95\x65\xa6\x29\x52\x43\x52\x76\x9c\x46\x7f\xf7\x05\x29\x4a\x22\xf5\x70\x9c\x99\xde\xc3\xea\x64\x93\x3f\x16\x8b\xc5\x7a\x53\x40\x89\x29\xb9\xbc\xcc\xb1\xe2\xf2\x58\xa2\x30\x99\x1d\xba\xba\x5a\x2c\xf6\xa0\x18\x6c\x38\xea\x74\x91\x90\x06\x47\x15\xe6\xbb\x7a\x93\xa0\xa0\xea\x58\x19\x26\x45\x52\x81\xd6\x07\xa9\xf2\x05\x21\xe6\x58\x61\x4a\x82\x01\xe9\x20\x3a\x25\x3f\x38\x8a\xc2\xec\x52\x72\xbb\xfe\xd9\x11\x03\x43\xb3\x9e\x50\xf6\x1d\x8f\xe7\xd1\xf8\xf2\xb9\xa7\x51\x03\x24\x2f\x07\xd3\x2d\x54\x1a\xa2\x35\xdf\xf1\x98\xf5\x7b\xff\xff\x7d\xbc\xb2\xd6\xa8\x74\x02\x79\xc9\xc4\x78\xeb\x10\x78\x06\x84\xcb\xe2\x1d\x48\x46\x39\x43\x61\x74\x66\x0f\x6e\x64\xe6\x85\x39\xbf\xc6\x03\xec\xba\x6c\x5e\xcc\x43\xb4\xe3\xd5\xef\x95\x69\xa4\x0a\xcd\x69\xce\xed\x60\xb5\x53\xa0\x71\x1e\x67\x59\x7e\x9f\x05\x26\xb6\xbc\x7e\xcd\x37\x67\x40\x0b\x05\x5b\x10\x70\x06\xd2\xc8\xef\x28\x32\xcd\x0a\xc1\x44\x11\x69\x89\xbd\xec\x0e\xa5\x21\xdb\x49\x6d\x22\x80\xd6\xbb\x0e\x70\x90\xea\x3b\xaa\xd9\x69\x1a\xea\xcd\x82\x10\x42\xa8\x2c\x4b\x29\xb2\x66\xfa\xab\x14\x54\xd6\x4a\xe3\xd7\x7f\xb8\x49\xa6\x33\x0a\x29\x31\xaa\xee\x85\x46\x51\x19\xb6\x65\x14\x0c\x06\x12\x31\xa8\x04\xf0\xcc\x70\x3d\x09\x1c\x6e\x0a\x9e\x95\xc1\xfe\x97\x97\xb9\x2c\x81\x89\xab\x2b\x37\x07\xdc\x91\x35\x6c\x8f\x0e\xe0\x57\x27\x43\x5c\x42\x6e\x3e\x3f\x2c\xd7\xcb\xf5\xf2\xa6\x63\x09\x5f\x7f\x39\x4b\x0b\x85\x1c\x41\x47\x9e\xa2\x15\xd8\x82\x90\x3d\x2a\xcd\xa4\x48\x09\x07\x83\xda\xf4\x3a\x00\x2a\x47\x91\xa8\x5a\xd0\x13\x28\xc5\xb0\x04\x21\x4e\xd1\x69\x74\xe9\x04\xa2\x55\xcc\x13\x90\xde\x1a\xe7\x10\x35\x4c\x6d\xb1\xd0\x06\x4b\x8a\x9c\xbb\xc3\x03\x67\xa0\x53\xf2\x8a\x82\x01\xb7\x92\xd4\x29\xa9\x37\xb5\x30\x75\xd2\x8d\x8d\x28\x18\x28\x9c\xac\x3b\x99\x25\x75\x95\x54\x4a\xbe\x20\x35\x56\xce\xfe\xa7\xbb\xd3\x08\x43\x65\x59\x49\x81\xc2\x84\xf2\x5e\x30\xa1\x0d\x08\x8a\x59\xa1\x64\x5d\x05\x77\x72\x40\x7b\x3c\x78\xd3\x29\x79\x7a\xbb\x79\x5e\x10\xd2\x42\x75\x4a\x6e\x16\x84\x08\x34\xd6\x4c\x1c\x33\xed\xa2\xcb\xcb\x03\x6e\x32\x3f\xd3\xc6\x06\xab\x0c\x39\x6e\xa1\xe6\x26\x25\x4f\xb9\xd0\xd7\xa4\x00\x83\x07\x38\x5a\xaa\xad\x44\x02\x39\xec\xcb\xac\x51\xb4\x86\x9c\xff\xeb\x28\xbd\xc8\x4d\xb4\x21\x18\xea\xe8\x7b\x9d\x8a\x55\x89\x90\x4a\xc9\xca\x2a\x6b\xab\xf3\x84\xc4\x31\xc4\x6e\x31\x8e\x2c\x9e\x67\x6b\x39\x5c\x1e\x32\x8d\x7c\xeb\x5c\x0a\xe6\x59\xa0\xfa\xba\xb3\x68\x07\xcd\xf3\x8c\x4b\x0a\x3c\x73\x71\x22\x25\x4f\x9f\x9c\x6f\x4d\x9b\x0d\x5a\x47\x75\x75\xf5\xe9\xd9\xaf\xb0\xe6\x90\x19\x84\xb2\x65\x8d\x10\xa8\xcd\xae\xff\x47\x88\x23\x18\x0e\x10\xd2\x52\x77\xc4\x5b\x52\x1b\x26\xf2\xac\x92\xca\xa4\xe4\x71\xed\xc7\xbc\x8a\xf6\xab\xbd\x93\x67\x79\xe3\xa0\xa3\x98\x12\x21\x9a\x30\x60\x45\x33\x1f\x87\x3a\x11\x11\x62\xb8\x0e\x59\xa4\xe0\x84\x14\x73\x1d\x88\xcd\xd2\x0d\x1d\xdd\x92\x42\x40\xac\x56\x3c\x25\x3b\x63\x2a\x9d\xae\x56\xbd\xd3\x48\x1f\x1f\x6f\x6f\xdb\x1b\x6c\x5d\xd2\x0c\xd6\xc3\x5a\x2b\xee\x19\xc9\xc1\xc0\xc6\x29\x89\xd7\xc6\x6e\xa6\xbd\x9d\x86\xb7\x41\x58\x9a\xe2\x2e\x5d\xad\xdc\xdd\xd8\x20\x92\x3e\xae\x1f\xef\x17\xe1\xfd\x78\xd5\xf4\x69\x40\x73\x91\x45\xc6\x71\x8f\xdc\xee\xbd\xa9\x0b\x3f\x5c\x49\x6d\x0a\x85\xfa\xcf\xe0\x92\x5b\xf9\x59\x53\xf6\xd3\x99\x1f\x0b\x38\xe9\xcf\xd2\x5a\x80\xfd\x1c\x3b\xe1\x42\x3b\x10\xac\x6a\x54\x24\x98\xb7\x03\xc1\xbc\x92\x1c\xc3\x8b\x6b\x8d\xba\xc3\x5b\x40\x80\x8f\x25\xd7\x53\x1d\x4b\x4e\x6b\x5e\xca\x1c\x53\xeb\xcf\xd8\xf6\x98\xf8\x18\xe1\xb4\xa7\x3b\x6f\x18\x6c\x96\x81\xca\x74\x74\x2c\xd8\x5b\x6d\x84\xad\x14\xdb\x83\xc1\xc8\x76\x2d\x36\xb0\x8b\xdb\xdb\x2f\xed\xc4\x30\x45\xb0\xe4\x46\x83\x8e\x4e\x90\x2f\x7c\xcc\xcb\x58\x43\x96\x8a\xbd\x61\x6e\x69\x75\xc3\x36\xe4\xf6\xa9\xc5\xb2\xaa\x37\x9c\xd1\x88\xeb\x36\x2b\x71\x3c\x05\x59\x4a\x07\x98\xd1\xa4\xbf\x70\xa8\x20\xcc\x05\x27\x8b\x46\xc7\x07\x3b\x65\x55\x7d\xec\xfd\xa0\x55\x69\x54\xbd\xb9\x8c\x23\x79\xc0\x5d\x38\x38\x66\xce\xcf\xf6\xbc\x8d\xb9\x3d\xc5\x6f\x6b\x3f\x7d\x16\x34\xad\xe7\xa7\xce\xd2\xda\x58\xe4\x13\xa6\xbc\xc2\xe0\x98\x09\x96\xcc\x18\x54\x7f\xe1\xb8\x99\x5f\x9a\x2e\xde\x3b\x46\xc3\xda\xdd\xdd\xdd\x5d\xc0\x40\x9f\x0f\x05\x1b\x87\x83\xe3\x8d\xfd\x6c\x10\xb7\x5c\x15\x11\xca\x68\x98\xb1\x07\x22\x6a\xc0\xd3\x7e\xd2\x5e\x8f\xde\x6d\x24\xa8\x3c\x08\x2a\x2d\xab\x5f\x23\xab\x6b\x3e\x2a\x85\x71\x39\x4d\xbf\x67\x47\x62\xe0\x2f\xb5\xac\x15\xc5\x29\x5d\xc8\xc6\x2a\x37\x00\x34\xf9\x48\x64\x1c\xcd\x37\x61\x4b\x1f\xd5\x98\x33\xa2\xca\xd0\x48\x9a\x8f\x33\x6d\x50\x78\x07\xf7\x65\xbd\x5e\x07\x8e\x5c\x9a\xb9\xf8\x98\x5a\xe4\x2a\xf4\xcc\x51\xf8\x3e\xd7\x17\xdb\xef\x1c\x5f\x1c\x27\xc4\x81\x8e\xb5\x03\xa7\x72\xb4\x9e\xb3\x38\x43\x8b\x32\x8e\x84\x70\xd8\x58\x87\xf8\x29\x2e\x50\x3f\x45\x29\x48\x3f\xee\x33\x9b\x00\x19\x6a\x27\x75\x75\x92\x6b\x05\x9c\xa4\x5a\x43\x60\x00\xb3\x69\x4b\x1f\x76\x6c\x64\x37\xc0\x99\x80\x4c\x56\x46\xa7\x24\xf9\xe7\x0b\xec\x61\xa9\x91\xd6\x8a\x99\xe3\x12\x8b\xfc\xb7\x2d\xe3\x98\xae\x72\xdc\xaf\x96\xab\x5a\x81\xc8\x65\x49\x92\x3f\xca\xd7\x87\xfb\x47\xfb\xe3\x8f\xf4\x77\x78\xfd\x1d\x0d\xe8\x0a\x28\xfe\x9b\xbd\xe1\x6f\x9f\xef\xee\xcb\xfe\x2e\x29\x2b\xd3\x81\xd2\x0c\x44\x35\x65\x73\x43\x75\x1d\x74\x3b\xa2\x2b\xb7\xd6\xdf\x14\x0a\xe1\x58\xe2\xb6\x5e\x1e\x14\x33\x38\x35\xa1\x10\xf2\xc1\xf8\x46\xea\xdd\x72\xcc\x47\xd2\x26\xae\x53\x6b\xda\xa9\xe1\x3e\xc3\x8e\x13\xe5\x6c\xf6\x70\x53\x7d\x92\xb3\x4e\xf8\x61\xbe\x7c\xe6\x1c\x59\x57\xbf\x79\x4c\x5e\xee\x51\x29\x66\x13\xa4\xa0\xa6\x68\xbe\x3e\x97\x48\x0a\x05\xc2\x24\xd6\x17\xe9\xbe\xf7\x71\xad\x70\xab\x50\xef\x32\x17\xee\xa3\xa5\x9a\xca\xaa\x17\x8b\xe3\xfc\x7a\x4e\x86\xdd\x46\xce\x12\xad\x7a\x2f\x85\x14\x03\x04\xa5\xa8\x75\xe2\x36\x4a\xf6\xc0\x59\xce\xcc\xd1\xba\x9e\x08\xe5\xf9\x19\xc3\xee\xd7\x31\xb0\x2d\x34\x2e\x2e\x26\x44\xd4\x54\x4f\x7f\x57\x48\xbe\xa4\xb1\x44\x51\x18\x06\xae\x8b\x31\x12\x50\xc4\xc0\x40\x10\xe7\x0a\xef\xbf\x23\x9a\x5e\x5f\x27\x3a\x75\x91\xda\xc6\xf5\xd9\xff\xbe\xe0\xe6\x25\x72\x56\x55\xda\xa8\x0f\xf9\x31\x55\xd3\xb6\x6e\xed\x67\x1f\x49\x65\x31\x8f\x76\x93\x21\xfa\x4d\x0a\x7b\xc0\x1f\x6d\x19\x9b\x92\x1f\x36\x64\x37\xbd\x35\xf2\xf4\xfc\xf3\x67\x18\x5d\xbf\x9e\xaa\x7d\x27\x03\xab\xd6\xfc\x5b\x13\x45\xff\xd5\x04\xd8\x68\xcd\x54\xb1\x43\xc8\xcb\x21\x2a\xb9\x15\xee\x25\x85\x0d\x1f\x5f\x79\x25\x39\xa3\xc7\x74\x70\x07\x5d\xd0\x63\x79\x6a\xc3\x7a\x72\x13\x01\x86\x21\xd7\x8f\x25\x37\xc3\x41\x42\x7c\xb9\xe1\x39\xf7\x2d\xf7\x49\xa6\x6b\x80\x30\x35\x87\x3c\x57\xa8\xf5\xdf\xa9\x5f\xf3\x4d\xa6\xe9\x0e\x6d\x28\xe8\x4b\xeb\x6e\xd6\x56\x84\x28\xac\x50\xf2\x81\x54\xda\x34\x2f\xca\x39\x0d\x14\x7d\x92\xd2\x7c\x71\x26\x43\x7c\xc5\x3c\x5e\x35\x0c\x6b\xbf\xaa\x8e\x6e\xd4\xb4\xd7\x13\x28\xa3\xdc\x4d\xa3\xda\x33\x8a\xdf\x94\xdc\xb3\x1c\xd5\xc7\x15\x6f\x44\xe2\x7c\xfd\x9b\x5a\xfa\xad\x3b\x94\xf3\x13\xe3\xe6\x69\x58\x51\x07\x83\xe3\x8c\x70\xe4\xd5\x0c\xd7\x43\xc6\x42\xe3\xf7\x4e\x0d\xe2\x1c\x92\x90\x0a\x55\xc9\xb4\xee\xfb\xd5\xfd\xc5\x55\x60\x76\x29\x59\xfd\xdf\x40\xa1\x81\x1a\xe9\x1a\x6e\x17\x56\x95\x1b\xff\x90\x06\x61\xfc\xe2\x7a\x6a\xc2\x29\xc0\xc5\xf3\x80\x96\x3d\x15\xf8\xc7\xa6\x27\xe7\x16\x9d\x3b\xbc\xce\x91\xa3\xc1\x6b\x3b\x92\x01\xe5\xcd\xa8\xfd\xf5\x3c\xcd\x63\xd7\x7d\x38\x8f\xdb\xd8\x47\x9e\xc1\x55\xcb\xc8\x73\x24\x50\x1b\x06\xe8\x48\xa2\x51\x1a\x4c\xce\x4d\x85\xed\xe7\x3a\x41\x9e\x62\xdb\xb1\xe8\xdc\xc5\xb8\x33\xe2\x15\xa1\xe9\x84\x59\x56\x27\xda\x88\xcf\x91\x45\x67\xda\x48\x05\x45\x54\xf1\xf9\x67\x23\x6f\x61\x93\x15\xfa\xaf\x68\x77\xbd\xdf\x8a\x7b\xdf\x99\x85\xad\x8a\x61\xa7\xd6\x1a\xce\x9f\x35\x53\x98\x39\x43\x18\xb8\x78\xd7\x53\x83\x77\x3a\x88\x53\x45\xd6\xd8\xd1\x27\xd6\x18\x9d\x3d\x67\xdd\x1b\xd5\x44\xe8\x98\x48\x2c\x6c\x30\x19\x1b\xf2\x78\xf7\x6c\x22\x39\x9f\x7a\x32\x8e\x65\xe7\x99\x9a\x2c\x6e\x86\x2c\xb6\xb5\x7b\xa3\x2c\x8b\xc1\x23\xdf\xfc\x23\x47\xd7\xab\xa3\xb2\x16\x8d\xe8\x66\xde\x3c\x1a\xd8\xaf\x7c\xf6\x68\x28\x9e\x7a\xf9\xe8\xb8\x9f\x6d\x4b\x52\x29\x74\x5d\xf6\xb2\xdf\x40\x51\x40\x81\x94\x43\x58\x25\x6e\x95\x2c\x5b\x6a\x49\x08\x99\x71\xc5\xb9\x72\xef\x16\xac\x44\x59\x9b\x94\xdc\xac\xdb\xf2\xd3\xe8\xc0\x13\xf4\x5d\xce\x34\xea\x79\x46\x2d\x81\xd1\x6e\x67\xf7\x57\x27\xbb\xa0\x5e\x29\xde\x39\x2f\xe8\xb9\xd3\xc6\x2f\x8d\x31\x43\xf1\xeb\xe3\x64\x53\xcc\x21\xfa\x7d\x7c\x73\xa6\xcb\x6a\xd6\xae\x19\xb7\x4e\x1f\x1e\x1e\x1e\x86\x20\xaf\x39\x29\x31\xb4\x5a\x2c\xea\x2a\xb7\x21\x7b\x61\xbd\x9d\x00\xc5\xda\x07\x37\xf7\xef\x98\x1d\xc0\xd0\x9d\xbb\x00\x2b\xfd\xf5\x3a\xf9\xb2\x5e\x37\xbd\x9f\x12\x5e\x33\x26\xb2\x2d\x67\xc5\xce\xa4\xc4\xba\x5b\x8d\x8a\xd9\x04\x75\x0b\xdc\x09\xb3\xa1\x3d\x4b\x63\xf1\x9f\x00\x00\x00\xff\xff\xb2\xda\xd7\x3c\xe2\x21\x00\x00")

func manifestYmlBytes() ([]byte, error) {
	return bindataRead(
		_manifestYml,
		"manifest.yml",
	)
}

func manifestYml() (*asset, error) {
	bytes, err := manifestYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "manifest.yml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x38, 0x3a, 0x71, 0x6c, 0x82, 0xcc, 0xd1, 0x9d, 0xfc, 0xfe, 0x84, 0xde, 0x4d, 0xb9, 0x3f, 0xe, 0x80, 0xc7, 0x2, 0xaf, 0x22, 0xf1, 0xea, 0xd7, 0xfe, 0xfe, 0x13, 0x97, 0x43, 0x4f, 0xab, 0xb7}}
	return a, nil
}

var _opsShasJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\xd1\xcf\x8a\x14\x41\x0c\x06\xf0\xfb\x3c\x45\xd3\xe7\x95\x49\x52\x55\xa9\x2a\x41\x7c\x10\xf1\x90\x7f\xe5\x2c\xcc\xf6\x0e\x3d\xdb\xa2\x88\xef\x2e\x3b\xe2\xb1\x2f\xf6\xf5\x23\xe4\xfb\x91\x7c\x39\x4d\xd3\xaf\xd3\x34\x4d\xd3\xfc\xf6\xf3\x16\xf3\xc7\x69\x5e\xe3\x76\x15\x8b\xf9\xe9\x6f\x7c\x93\xb7\xcb\x7b\x7c\x5e\xe3\x1a\x72\x8f\xfb\x79\x91\x97\xf8\x64\xaf\x8b\xbd\x6e\xeb\x3d\xce\xf7\x8b\xe0\xe7\x7f\xd3\xdf\xe5\xba\x3d\xb6\xf4\x34\x0c\x71\x14\xcd\x39\x6b\xf2\x41\x08\x05\x99\x13\x0d\x0d\x23\xae\x04\x5a\x48\x19\xe6\xd3\x34\xfd\x7e\xfa\x5f\xc5\x37\x59\x3d\x96\x0f\xeb\xb6\xd8\x8e\xa3\x24\xec\xe2\xe4\x14\x55\x19\x84\x92\xa7\xec\x51\x03\x93\x16\x64\x62\x06\xef\x5d\x5a\x3d\xe6\x58\x9f\xe3\x45\x96\x65\xc7\xa0\x06\xc4\x26\xbd\x72\x6f\x50\x19\x6b\xd3\x66\x39\x47\x76\x69\xe0\xaa\x29\x3a\x15\x6e\x7c\xf0\x16\xab\x0c\x59\x64\xc7\xe0\x92\x29\x0a\x9b\x92\x79\x09\xd3\x60\x18\x55\x84\x20\xbb\x67\xf6\xa1\x3d\x10\x40\xed\x98\xe1\x79\x19\xd7\xed\x87\xeb\x0e\x22\x31\x25\x67\x4b\x05\x88\x7b\x1b\x88\xe1\xc3\x2b\x14\x88\xa1\xd4\x0c\x73\x1f\xca\xd5\xd3\x31\x84\xad\xe1\x97\x6d\xcf\xd0\xc5\x00\x2a\x51\xf0\x90\xee\xb5\x84\x64\xea\xf4\xde\x4d\x19\x53\xf1\x6e\x85\x73\x6d\xed\x98\x61\x93\xbd\x47\x00\x36\x8c\x92\xc1\x41\x4b\x8b\xda\xb0\x0d\x96\x48\x95\x99\x24\x17\xb7\xde\x30\x8b\x27\x7c\xf4\x9f\xbe\xfe\x09\x00\x00\xff\xff\x1f\x21\x26\x94\xa1\x03\x00\x00")

func opsShasJsonBytes() ([]byte, error) {
	return bindataRead(
		_opsShasJson,
		"ops/shas.json",
	)
}

func opsShasJson() (*asset, error) {
	bytes, err := opsShasJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "ops/shas.json", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x40, 0xa, 0x6e, 0x2, 0x54, 0xf1, 0xd2, 0x2a, 0x6b, 0x4, 0x8f, 0x4a, 0x68, 0xbc, 0x74, 0x5f, 0x5a, 0xc4, 0x12, 0x9, 0x46, 0x88, 0xb1, 0xfd, 0x86, 0x53, 0x48, 0xeb, 0xaa, 0x9c, 0x2f, 0xb8}}
	return a, nil
}

var _opsVersionsJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x95\xcf\x6e\x82\x40\x10\xc6\xef\x3c\xc5\x66\xcf\xce\x22\xfe\x6b\x6a\xe2\x93\x34\x3d\x8c\xcb\xa8\x24\xcb\x42\xf6\x8f\x5a\x1b\xdf\xbd\x01\x44\x5d\x3c\xd0\x34\x21\x0d\x1e\x3c\x0c\xdf\xcc\xf7\xed\x2f\xcb\xf0\x11\x31\xf6\x1d\x31\xc6\x18\x77\x5f\x25\xf1\x35\xe3\x86\x4a\x85\x92\xf8\xa4\x29\x97\xe8\x0e\x55\x39\xb6\x8e\x72\x49\x4a\xd9\x18\x55\x86\x76\x73\x26\x9d\xa1\x8a\x8f\x64\x6c\x56\xe8\x56\x7e\x44\xe5\xeb\x31\xef\x6f\x22\x59\xf2\x88\xb1\xeb\xe4\xf7\x1e\x86\x14\xa1\x25\x1b\x6b\xcc\x69\x23\x0b\x2d\x0b\x6f\x2c\x75\x87\x37\xd3\x18\xe3\x95\xac\x6a\xec\x2a\x2b\xed\x2d\xd7\x9a\xf1\x85\x48\xc4\xf4\xf1\xc4\x1b\x55\x55\x0f\xce\x95\x76\x1d\xc7\x76\x0e\xe4\xe1\x44\xd6\x41\x22\x30\xc7\x4b\xa1\xf1\x64\x85\x2c\xf2\xf8\x3e\x16\x7c\x09\xb2\xc8\xcb\x4c\x51\x0a\x6d\x48\xd0\x74\x7a\x92\xd4\x2e\xe0\xb7\x5e\x3b\x0f\x0d\x1c\xa8\x21\x08\xb7\xbf\x3c\xdc\x5b\x8c\x4f\xc7\x60\x8c\x17\xb6\x8a\x14\x34\xdf\x5b\xc2\xc3\xdc\xb9\x56\xbf\x6b\xd4\xfe\xff\x9d\xf2\x1e\x4d\x4a\x1a\x8c\xd7\xb2\x97\xf3\xab\x36\x0c\x97\x88\x64\x25\xe6\x03\xa1\x7e\x32\x87\xc6\x68\x84\xb4\x4d\x46\x39\xea\x97\xd7\xe5\x85\x74\xa8\x0b\x43\x2d\x07\x02\x7c\xf3\x84\xe5\x08\xb9\xee\x0d\xee\x50\x63\xff\x0d\x0e\x74\x9d\xdb\x3b\x17\xb3\xc1\x16\xc5\xcd\x18\x1a\x93\x11\x12\xce\xf4\x4e\xf9\x73\xba\xed\x45\xdc\x11\x76\x76\xf1\x40\x78\x5b\x53\x58\x8c\x10\xad\x34\x94\x1e\x7c\x3f\xd9\x50\x17\x86\x9a\x89\xa9\x98\x0d\xf5\x91\x6b\x7c\xa1\xf6\x18\x21\x5f\x8f\xfd\x8b\xe1\xa1\x09\xc3\xac\x86\xc3\xea\x11\x61\xf5\xaf\x44\xa3\xcf\x9f\x00\x00\x00\xff\xff\xe5\x24\xd2\x8c\x01\x0a\x00\x00")

func opsVersionsJsonBytes() ([]byte, error) {
	return bindataRead(
		_opsVersionsJson,
		"ops/versions.json",
	)
}

func opsVersionsJson() (*asset, error) {
	bytes, err := opsVersionsJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "ops/versions.json", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xde, 0x98, 0xc0, 0xf5, 0xd4, 0x88, 0xfd, 0xa6, 0xd9, 0xe4, 0x5d, 0x2a, 0x2b, 0xb, 0xa5, 0xd8, 0x27, 0x71, 0x71, 0x4e, 0xa8, 0xe9, 0xaf, 0xf6, 0x97, 0x4f, 0xd4, 0x28, 0x36, 0x4e, 0x64, 0x7}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"README.md": readmeMd,

	"director/aws/cpi.yml": directorAwsCpiYml,

	"director/custom-ops.yml": directorCustomOpsYml,

	"director/external-ip.yml": directorExternalIpYml,

	"director/manifest.yml": directorManifestYml,

	"director-versions.json": directorVersionsJson,

	"manifest.yml": manifestYml,

	"ops/shas.json": opsShasJson,

	"ops/versions.json": opsVersionsJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"README.md": &bintree{readmeMd, map[string]*bintree{}},
	"director": &bintree{nil, map[string]*bintree{
		"aws": &bintree{nil, map[string]*bintree{
			"cpi.yml": &bintree{directorAwsCpiYml, map[string]*bintree{}},
		}},
		"custom-ops.yml":  &bintree{directorCustomOpsYml, map[string]*bintree{}},
		"external-ip.yml": &bintree{directorExternalIpYml, map[string]*bintree{}},
		"manifest.yml":    &bintree{directorManifestYml, map[string]*bintree{}},
	}},
	"director-versions.json": &bintree{directorVersionsJson, map[string]*bintree{}},
	"manifest.yml":           &bintree{manifestYml, map[string]*bintree{}},
	"ops": &bintree{nil, map[string]*bintree{
		"shas.json":     &bintree{opsShasJson, map[string]*bintree{}},
		"versions.json": &bintree{opsVersionsJson, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
