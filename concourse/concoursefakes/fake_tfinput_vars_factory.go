// Code generated by counterfeiter. DO NOT EDIT.
package concoursefakes

import (
	"sync"

	"github.com/EngineerBetter/concourse-up/concourse"
	"github.com/EngineerBetter/concourse-up/config"
	"github.com/EngineerBetter/concourse-up/terraform"
)

type FakeTFInputVarsFactory struct {
	NewInputVarsStub        func(config.Config) terraform.InputVars
	newInputVarsMutex       sync.RWMutex
	newInputVarsArgsForCall []struct {
		arg1 config.Config
	}
	newInputVarsReturns struct {
		result1 terraform.InputVars
	}
	newInputVarsReturnsOnCall map[int]struct {
		result1 terraform.InputVars
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeTFInputVarsFactory) NewInputVars(arg1 config.Config) terraform.InputVars {
	fake.newInputVarsMutex.Lock()
	ret, specificReturn := fake.newInputVarsReturnsOnCall[len(fake.newInputVarsArgsForCall)]
	fake.newInputVarsArgsForCall = append(fake.newInputVarsArgsForCall, struct {
		arg1 config.Config
	}{arg1})
	fake.recordInvocation("NewInputVars", []interface{}{arg1})
	fake.newInputVarsMutex.Unlock()
	if fake.NewInputVarsStub != nil {
		return fake.NewInputVarsStub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.newInputVarsReturns
	return fakeReturns.result1
}

func (fake *FakeTFInputVarsFactory) NewInputVarsCallCount() int {
	fake.newInputVarsMutex.RLock()
	defer fake.newInputVarsMutex.RUnlock()
	return len(fake.newInputVarsArgsForCall)
}

func (fake *FakeTFInputVarsFactory) NewInputVarsCalls(stub func(config.Config) terraform.InputVars) {
	fake.newInputVarsMutex.Lock()
	defer fake.newInputVarsMutex.Unlock()
	fake.NewInputVarsStub = stub
}

func (fake *FakeTFInputVarsFactory) NewInputVarsArgsForCall(i int) config.Config {
	fake.newInputVarsMutex.RLock()
	defer fake.newInputVarsMutex.RUnlock()
	argsForCall := fake.newInputVarsArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeTFInputVarsFactory) NewInputVarsReturns(result1 terraform.InputVars) {
	fake.newInputVarsMutex.Lock()
	defer fake.newInputVarsMutex.Unlock()
	fake.NewInputVarsStub = nil
	fake.newInputVarsReturns = struct {
		result1 terraform.InputVars
	}{result1}
}

func (fake *FakeTFInputVarsFactory) NewInputVarsReturnsOnCall(i int, result1 terraform.InputVars) {
	fake.newInputVarsMutex.Lock()
	defer fake.newInputVarsMutex.Unlock()
	fake.NewInputVarsStub = nil
	if fake.newInputVarsReturnsOnCall == nil {
		fake.newInputVarsReturnsOnCall = make(map[int]struct {
			result1 terraform.InputVars
		})
	}
	fake.newInputVarsReturnsOnCall[i] = struct {
		result1 terraform.InputVars
	}{result1}
}

func (fake *FakeTFInputVarsFactory) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.newInputVarsMutex.RLock()
	defer fake.newInputVarsMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeTFInputVarsFactory) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ concourse.TFInputVarsFactory = new(FakeTFInputVarsFactory)
